- name: Check if postgres cluster {{ postgres.version }} {{ postgres.cluster }} exists
  shell: pg_lsclusters -h | grep -E "^{{ postgres.version }} {{ postgres.cluster }}"
  ignore_errors: yes  # Might not exist
  register: check_cluster_exists
  become: yes
  become_user: postgres
  when: patroni_leader | default(False)

- name: Give {{ postgres.user }} ownership of {{ postgres.config_base_dir }}
  file:
    path: "{{ postgres.config_base_dir }}"
    owner: "{{ postgres.user }}"
    group: "{{ postgres.group }}"
    mode: 0750
  become: yes

- name: Create cluster {{ postgres.version }} {{ postgres.cluster }} if necessary
  shell: pg_createcluster {{ postgres.version }} {{ postgres.cluster }}
  become: yes
  become_user: postgres
  when:
    - check_cluster_exists is failed
    - patroni_leader | default(False)

- name: Ensure stats_temp_directory exists
  file:
    state: directory
    path: /var/run/postgresql/{{ postgres.version }}-{{ postgres.cluster }}.pg_stat_tmp
    owner: "{{ postgres.user }}"
    group: "{{ postgres.group }}"
    mode: "2750"
  become: yes

- name: Ensure {{ postgres.config_dir }}/conf.d exists
  file:
    state: directory
    path: "{{ postgres.config_dir }}/conf.d"
    owner: "{{ postgres.user }}"
    group: "{{ postgres.group }}"
    mode: 0750
  become: yes

- name: Start postgres in case it was stopped by hand
  command: pg_ctlcluster {{ postgres.version }} {{ postgres.cluster }} start
  become: yes
  become_user: postgres
  ignore_errors: yes  # Might already be running
  when:
    - check_cluster_exists is failed
    - patroni_leader | default(False)

- name: Create patroni superuser
  community.general.postgresql_user:
    db: postgres
    name: patroni
    password: "{{ password.patroni }}"
    priv: "ALL"
    role_attr_flags: SUPERUSER
    expires: infinity
  become: yes
  become_user: postgres
  when:
    - check_cluster_exists is failed
    - patroni_leader | default(False)

- name: Create replication user
  community.general.postgresql_user:
    db: postgres
    name: replicator
    password: "{{ password.replicator }}"
    priv: "ALL"
    role_attr_flags: REPLICATION
    expires: infinity
  become: yes
  become_user: postgres
  when:
    - check_cluster_exists is failed
    - patroni_leader | default(False)

- name: Add patroni to pg_hba.conf (this hosts)
  community.general.postgresql_pg_hba:
    dest: "{{ postgres.config_dir }}/pg_hba.conf"
    contype: host
    users: patroni
    source: "{{ item }}"
    databases: postgres
    method: md5
    create: true
  with_items:
    - 127.0.0.1/32
    - "{{ ansible_default_ipv4.address }}/32"
  become: yes
  become_user: postgres
  when:
    - patroni_leader | default(False)

- name: Add patroni to pg_hba.conf (group hosts)
  community.general.postgresql_pg_hba:
    dest: "{{ postgres.config_dir }}/pg_hba.conf"
    contype: host
    users: patroni
    source: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
    databases: postgres
    method: md5
    create: true
  with_items:
    - "{{ groups['db'] }}"
  become: yes
  become_user: postgres
  when:
    - patroni_leader | default(False)

- name: Add replicator to pg_hba.conf (this host)
  community.general.postgresql_pg_hba:
    dest: "{{ postgres.config_dir }}/pg_hba.conf"
    contype: host
    users: replicator
    source: "{{ item }}"
    databases: postgres,replication
    method: md5
    create: true
  with_items:
    - 127.0.0.1/32
    - "{{ ansible_default_ipv4.address }}/32"
  become: yes
  become_user: postgres
  when:
    - patroni_leader | default(False)

- name: Add replicator to pg_hba.conf (group hosts)
  community.general.postgresql_pg_hba:
    dest: "{{ postgres.config_dir }}/pg_hba.conf"
    contype: host
    users: replicator
    source: "{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
    databases: postgres,replication
    method: md5
    create: true
  with_items:
    - "{{ groups['db'] }}"
  become: yes
  become_user: postgres
  when:
    - patroni_leader | default(False)

# - name: Create {{ postgres.config_dir }}/conf.d directory
#   file:
#     state: directory
#     path: "{{ postgres.config_dir }}/conf.d"
#     owner: "{{ postgres.user }}"
#     group: "{{ postgres.group }}"
#     mode: 0750
#   become: yes
#   when: not patroni_leader

# - name: Create {{ postgres.run_dir }}/{{ postgres.version }}-main.pg_stat_tmp directory
#   file:
#     state: directory
#     path: "{{ postgres.run_dir }}/{{ postgres.version }}-main.pg_stat_tmp"
#     owner: "{{ postgres.user }}"
#     group: "{{ postgres.group }}"
#     mode: '2750'
#   become: yes
#   when: not patroni_leader

- name: Disable postgresql (patroni handles it)
  systemd:
    name: postgresql
    state: stopped
    enabled: no
  become: yes

- name: Stop postgres in case it was started by hand
  command: pg_ctlcluster {{ postgres.version }} main stop
  become: yes
  become_user: postgres
  ignore_errors: yes  # Might already not be running
  when:
    - check_cluster_exists is failed
    - patroni_leader | default(False)

# - name: Ensure {{ pg_run_time_dir }}/{{ pg_version }}-main.pg_stat_tmp directory
#   file:
#     state: directory
#     path: "{{ pg_run_time_dir }}/{{ pg_version }}-main.pg_stat_tmp"
#     owner: postgres
#     group: postgres
#     mode: '2750'
#   become: yes

- name: Deploy /etc/systemd/system/patroni.service
  template:
    src: patroni.service.j2
    dest: /etc/systemd/system/patroni.service
    owner: root
    group: root
    mode: 0640
  become: yes
